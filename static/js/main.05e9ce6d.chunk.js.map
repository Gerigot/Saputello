{"version":3,"sources":["saputello.js","App.js","serviceWorker.js","index.js"],"names":["frase_a","frase_b","frase_c","frase_d","frase_e","frase_f","frase_g","getRandomArrayElement","array","number","length","Math","floor","random","getFrase","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateFrase","setState","frase","generator","state","react_default","a","createElement","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNACMA,SAAS,CAAC,uBAAuB,wBAAwB,uBAAuB,4BAA4B,2BAA2B,6BAA6B,6BAA6B,4BAA4B,0BAA2B,6BACxPC,EAAU,CAAC,uBAAwB,cAAe,aAAc,uBAAwB,YAAa,cAAe,cAAe,cAAe,gBAAgB,YAClKC,EAAU,CAAC,6CAA6C,kDAAkD,gFAAgF,sDAAsD,6FAA6F,qDAAqD,iEAAiE,yEAAyE,4DAA4D,wDACxkBC,EAAU,CAAC,oCAAoC,2DAA2D,kDAAkD,qDAAqD,qDAAkD,gCAAgC,8DAAwD,6CAA6C,4CAA4C,0CACpbC,EAAU,CAAC,+BAA+B,kCAAkC,6BAA6B,oCAAoC,iCAAiC,yCAAyC,gCAAgC,gCAAgC,gCAAgC,+BACvTC,EAAU,CAAC,oCAAoC,yCAAyC,yDAAyD,wCAAwC,wCAAwC,qDAAqD,4CAAyC,mDAAmD,yCAAyC,oDAC3ZC,EAAU,CAAC,0CAA2C,wCAAwC,8CAA2C,wCAAyC,kDAAkD,yDAAyD,qDAAsD,8CAA+C,sCAAuC,yCAMzaC,EAAwB,SAACC,GAC3B,IALoBC,EAMpB,OAAOD,GANaC,EAKgBD,EAAME,OAJnCC,KAAKC,MAAMD,KAAKE,SAAWJ,MAYvBK,EAJE,WACb,OAAQP,EAAsBP,GAAWO,EAAsBN,GAAWM,EAAsBL,GAAWK,EAAsBJ,GAAWI,EAAsBH,GAAWG,EAAsBF,GAAWE,EAAsBD,ICOzNS,cArBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,cAAgB,WACdP,EAAKQ,SAAS,CAAEC,MAAOC,OAJvBV,EAAKW,MAAQ,CAAEF,MAAO,6CAFLT,wEAUjB,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUZ,KAAKQ,MAAMF,OACnCG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,QAASb,KAAKI,eAA7C,mBAfQU,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05e9ce6d.chunk.js","sourcesContent":["\nconst frase_a= [\"L'utenza potenziale \",\"Il bisogno emergente \",\"Il quadro normativo \",\"L'attuale ottimizzazione \",\"La nuova organizzazione \",\"L'approccio programmatico \",\"Il contesto motivazionale \",\"Il criterio metodologico \",\"Il modello di sviluppo \", \"Il metodo partecipativo \"]\nconst frase_b = [\"si caratterizza per \", \"privilegia \", \"prefigura \", \"riconduce a sintesi \", \"persegue \", \"estrinseca \", \"si propone \", \"presuppone \", \"porta avanti \",\"auspica \"]\nconst frase_c = [\"il ribaltamento della logica preesistente \",\"il superamento di ogni ostacolo e/o resistenza \",\"un organico collegamento interdisciplinare ed una prassi di lavoro di gruppo \",\"la puntuale corrispondenza fra obiettivi e risorse \",\"la verifica critica degli obiettivi istituzionali e l'individuazione di fini quantitativi \",\"il riorientamento delle linee di tendenza in atto \",\"l'accorpamento delle funzioni ed il decentramento decisionale \",\"la ricognizione del bisogno emergente e della domanda non soddisfatta \",\"la riconversione ed articolazione periferica dei servizi \",\"un corretto rapporto fra strutture e sovrastrutture \"]\nconst frase_d = [\"nel primario interesse di tutti, \",\"senza pregiudicare l'attuale livello delle prestazioni, \",\"al di sopra di interessi e pressioni di parte, \",\"secondo un modulo di interdipendenza orizzontale, \",\"in una visione organica e ricondotta ad unità, \",\"con criteri non dirigistici, \",\"al di là delle contraddizioni e difficoltà iniziali, \",\"in maniera articolata e non totalizzante, \",\"attraverso meccanismi di coinvolgimento, \",\"senza precostituzione delle risposte, \"]\nconst frase_e = [\"sostanziando e vitalizzando \",\"recuperando ovvero rivalutando \",\"ipotizzando e perseguendo \",\"non assumendo mai come implicito \",\"fattuizzando e concretizzando \",\"non sottacendo ma anzi puntualizzando \",\"petenziando ed incrementando \",\"non dando certo per scontato \",\"evidenziando ed esplicitando \",\"attivando ed implementando \"]\nconst frase_f = [\"nei tempi brevi, anzi brevissimi \",\"in un'ottica preventiva e non ex-post \",\"in un ambito territoriale omogeneo, a livelli diversi \",\"nel rispetto della normativa vigente \",\"nel contesto di un sistema integrato \",\"quale sua premessa indispensabile e condizionante \",\"nella misura in cui ciò sia fattibile \",\"con le dovute ed imprescindibili sottolineature \",\"in termini di efficacia ed efficienza \",\"a monte ed a valle della situazione contingente \"]\nconst frase_g = [\"la trasparenza di ogni atto decisionale\", \"la non classificazione delle risposte\",\"una congrua flessibilità delle strutture\",\"l'annullamento di ogni ghettizzazione\", \"il coinvolgimento attivo di operatori ed utenti\",\"l'appianamento delle discrepanze e discrasie esistenti\",\"la ridefinizione di una nuova figura professionale\", \"l'adozione di una metodologia differenziata\", \"la debucratizzazione del linguaggio\", \"un indispensabile salto di qualità\"]\n\nconst generateRandom = (number) => {\n    return Math.floor(Math.random() * number)\n}\n\nconst getRandomArrayElement = (array)=>{\n    const randomNumber = generateRandom(array.length);\n    return array[randomNumber] \n}\n\nconst getFrase = () =>{\n    return (getRandomArrayElement(frase_a) + getRandomArrayElement(frase_b) + getRandomArrayElement(frase_c) + getRandomArrayElement(frase_d) + getRandomArrayElement(frase_e) + getRandomArrayElement(frase_f) + getRandomArrayElement(frase_g))\n} \n\nexport default getFrase;","import React, { Component } from 'react';\nimport './App.css';\nimport generator from './saputello';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { frase: \"Clicca sul bottone per generare una frase\" }\n  }\n\n  generateFrase = () => {\n    this.setState({ frase: generator() })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 className=\"App-h2\">{this.state.frase}</h2>\n          <button className=\"App-Button\" onClick={this.generateFrase}>Genera</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}